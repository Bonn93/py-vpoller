#!/usr/bin/env python
#
# Copyright (c) 2013 Marin Atanasov Nikolov <dnaeon@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer
#    in this position and unchanged.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""
vpoller-worker is a daemon, which receives new message requests from a
ZeroMQ proxy/broker that need to be processed.

The received messages are dispatched to the internal vSphere Agents for
performing the actual polling from a vCenter server.

"""

import sys
import logging

from vpoller.core import VPollerWorker, VPollerClient
from docopt import docopt

def start(pidfile, config, daemon):
    """
    Start the VPoller Worker daemon

    Args:
        pidfile (string): Location to the daemon's pidfile
        config  (string): Configuration file of the VPoller Worker
        daemon    (bool): If True daemonize the VPoller Worker

    """
    worker = VPollerWorker(pidfile)

    if daemon:
        # Run as daemon
        worker.start(config)
    else:
        # Run in the foreground
        worker.run(config)

def stop(endpoint):
    """
    Stops the VPoller Worker daemon

    Args:
        endpoint (string): The endpoint we send the shutdown message to

    """
    # The message we send to initiate the shutdown sequence
    msg = { "cmd": "shutdown" }

    # Send out our message
    client = VPollerClient(endpoint=endpoint, timeout=1000, retries=3)
    result = client.run(msg)

    print result

def status(endpoint):
    """
    Get status information from the VPoller Worker daemon

    Args:
        endpoint (string): The endpoint we send the status message to
    
    """
    # The message we send to get status information
    msg = { "cmd": "status" }

    # Send out our message
    client = VPollerClient(endpoint=endpoint, timeout=1000, retries=3)
    result = client.run(msg)

    print result

def main():
    usage="""
Usage: vpoller-worker [-d] [-p <pidfile>] [-f <config-file>] [-o <logfile>] start
       vpoller-worker -e <endpoint> stop
       vpoller-worker -e <endpoint> status
       vpoller-worker --help
       vpoller-worker --version

Arguments:
  start                                     Start the VPoller Worker
  stop                                      Stop the VPoller Worker
  status                                    Get status information

Options:
  -h, --help                                Display this usage info
  -v, --version                             Display version and exit
  -d, --daemon                              Start as a daemon, otherwise
                                            run in the foreground
  -p <pidfile>, --pidfile <pidfile>         Specify pidfile file to use
                                            [default: /var/run/vpoller/vpoller-worker.pid]
  -f <config-file>, --config <config-file>  Specify config file to use
                                            [default: /etc/vpoller/vpoller-worker.conf]
  -e <endpoint>, --endpoint <endpoint>      Specify the endpoint we connect to
  -o <logfile>, --output <logfile>          Specify the logfile to use
                                            [default: /var/log/vpoller/vpoller-worker.log]

"""

    args = docopt(usage, version="1.0.0")

    if args["--output"] == "-":
        logging.basicConfig(stream=sys.stdout,
                            format='%(asctime)s - %(levelname)s - vpoller-worker[%(process)s]: %(message)s',
                            level=logging.DEBUG)
    else:
        logging.basicConfig(filename=args["--output"],
                            format='%(asctime)s - %(levelname)s - vpoller-worker[%(process)s]: %(message)s',
                            level=logging.DEBUG)
    
    if args["start"]:
        start(args["--pidfile"], args["--config"], args["--daemon"])
    elif args["stop"]:
        stop(args["--endpoint"])
    elif args["status"]:
        status(args["--endpoint"])
    
if __name__ == '__main__':
    main()

