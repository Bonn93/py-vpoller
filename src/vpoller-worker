#!/usr/bin/env python
#
# Copyright (c) 2013-2014 Marin Atanasov Nikolov <dnaeon@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer
#    in this position and unchanged.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""
vpoller-worker is a daemon, which receives new message requests from a
ZeroMQ proxy/broker that need to be processed.

The received messages are dispatched to the internal vSphere Agents for
performing the actual polling from a vCenter server.

"""

import json
import logging

from vpoller.client import VPollerClient
from vpoller.worker import VPollerWorker
from docopt import docopt
from tabulate import tabulate

def start(pidfile, config, daemon):
    """
    Start the VPoller Worker daemon

    Args:
        pidfile (string): Location to the daemon's pidfile
        config  (string): Configuration file of the VPoller Worker
        daemon    (bool): If True daemonize the VPoller Worker

    """
    worker = VPollerWorker(pidfile)

    if daemon:
        # Run as daemon
        worker.start(config)
    else:
        # Run in the foreground
        worker.run(config)

def stop(endpoint):
    """
    Stops the VPoller Worker daemon

    Args:
        endpoint (string): The endpoint we send the shutdown message to

    """
    # The message we send to initiate the shutdown sequence
    msg = { "method": "worker.shutdown" }

    # Send out our message
    client = VPollerClient(endpoint=endpoint, timeout=1000, retries=3)
    result = client.run(msg)

    return result

def status(endpoint):
    """
    Get status information from the VPoller Worker daemon

    Args:
        endpoint (string): The endpoint we send the status request to
    
    """
    # The message we send to get status information
    msg = { "method": "worker.status" }

    # Send out our message
    client = VPollerClient(endpoint=endpoint, timeout=1000, retries=3)
    result = client.run(msg)

    return result

def initdb(config):
    """
    Initialize the vPoller Worker database
    
    Args:
        config (str): Path to the vPoller Worker config file

    """
    worker = VPollerWorker(pidfile=None)
    worker.load_worker_config(config)
    worker.worker_db_init()

def add_update_agent(config, user, pwd, host, enabled):
    """
    Add/update a vSphere Agent in the database

    Args:
        config    (str): Path to the vPoller Worker config file
        user      (str): Username to use for this vSphere Agent
        pwd       (str): Password to use for this vSphere Agent
        host      (str): Hostname of the vSphere server
        enabled  (bool): If True mark this vSphere Agent as enabled

    """
    worker = VPollerWorker(pidfile=None)
    worker.load_worker_config(config)
    worker.worker_db_add_update_agent(
        user=user,
        pwd=pwd,
        host=host,
        enabled=enabled
    )

def remove_agent(config, host):
    """
    Remove a vSphere Agent from the database

    Args:
        config    (str): Path to the vPoller Worker config file
        host      (str): Hostname of the vSphere server

    """
    worker = VPollerWorker(pidfile=None)
    worker.load_worker_config(config)
    worker.worker_db_remove_agent(host=host)

def list_agents(config):
    """
    List the registered vSphere Agents

    Args:
        config    (str): Path to the vPoller Worker config file

    """
    worker = VPollerWorker(pidfile=None)
    worker.load_worker_config(config)

    agents = worker.worker_db_get_agents()
    print tabulate(
        agents,
        headers=['Hostname', 'Username', 'Password', 'Enabled'],
        tablefmt='grid'
    )

def main():
    usage="""
Usage: vpoller-worker [-d] [-D] [-p <pidfile>] [-f <config>] [-o <logfile>] start
       vpoller-worker [-D] -e <endpoint> stop
       vpoller-worker [-D] -e <endpoint> status
       vpoller-worker [-D] [-f <config>] initdb
       vpoller-worker [-D] [-f <config>] [-E <enabled>] -H <host> -U <user> -P <pwd> (agent-add|agent-update)
       vpoller-worker [-D] [-f <config>] -H <host> agent-remove
       vpoller-worker [-D] agent-list
       vpoller-worker --help
       vpoller-worker --version

Arguments:
  start                                     Start the VPoller Worker
  stop                                      Stop the VPoller Worker
  status                                    Get status information
  agent-add                                 Add a vSphere Agent to the database
  agent-update                              Update a vSphere Agent in the database
  agent-remove                              Remove a vSphere Agent from the database
  agent-list                                List registered vSphere Agents 

Options:
  -h, --help                                Display this usage info
  -v, --version                             Display version and exit
  -d, --daemon                              Start as a daemon, otherwise
                                            run in the foreground
  -D, --debug                               Debug mode, be more verbose
  -p <pidfile>, --pidfile <pidfile>         Specify pidfile file to use
                                            [default: /var/run/vpoller/vpoller-worker.pid]
  -f <config>, --file <config>              Specify config file to use
                                            [default: /etc/vpoller/vpoller.conf]
  -e <endpoint>, --endpoint <endpoint>      Specify the endpoint we connect to
  -o <logfile>, --output <logfile>          Specify the logfile to use
                                            [default: /var/log/vpoller/vpoller-worker.log]
  -E <enabled>, --enabled <enabled>         Mark the vSphere Agent as enabled
                                            [default: 1]
  -H <host>, --host <host>                  Specify the hostname of the vSphere Agent
  -U <user>, --user <user>                  Username to use when connecting to the vSphere Agent
  -P <pwd>, --pwd <pwd>                     Password to use when connecting to the vSphere Agent

"""

    args = docopt(usage, version="0.1.0")

    level = logging.DEBUG if args['--debug'] else logging.INFO

    logging.basicConfig(
        filename=args['--output'],
        format='%(asctime)s - %(levelname)s - vpoller-worker[%(process)s]: %(message)s',
        level=level
    )

    result = None
        
    if args['start']:
        start(
            args['--pidfile'],
            args['--file'],
            args['--daemon']
        )
    elif args['stop']:
        result = stop(args['--endpoint'])
    elif args['status']:
        result = status(args['--endpoint'])
    elif args['initdb']:
        initdb(args['--file'])
    elif args['agent-add'] or args['agent-update']:
        add_update_agent(
            config=args['--file'],
            user=args['--user'],
            pwd=args['--pwd'],
            host=args['--host'],
            enabled=int(args['--enabled'])
        )
    elif args['agent-remove']:
        remove_agent(
            config=args['--file'],
            host=args['--host']
        )
    elif args['agent-list']:
        list_agents(config=args['--file'])

    if result:
        result = json.loads(result)
        print json.dumps(result, indent=4)
        

        
if __name__ == '__main__':
    main()

