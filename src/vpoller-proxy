#!/usr/bin/env python
#
# Copyright (c) 2013-2014 Marin Atanasov Nikolov <dnaeon@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer
#    in this position and unchanged.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""
vpoller-proxy is a ZeroMQ proxy/broker that load balances requests
between a pool of ZeroMQ workers.

"""

import json
import logging

from vpoller.client import VPollerClient
from vpoller.proxy import VPollerProxy
from docopt import docopt

def start(pidfile, config, daemon):
    """
    Start the VPoller Proxy daemon

    Args:
        pidfile (string): Location to the daemon's pidfile
        config  (string): Configuration file of the VPoller Proxy
        daemon    (bool): If True daemonize the VPoller Proxy

    """
    proxy = VPollerProxy(pidfile)

    if daemon:
        # Run as daemon
        proxy.start(config)
    else:
        # Run in the foreground
        proxy.run(config)

def stop(endpoint):
    """
    Stops the VPoller Proxy daemon

    Args:
        endpoint (string): The endpoint we send the shutdown message to

    """
    # The message we send to initiate the shutdown sequence
    msg = { "method": "proxy.shutdown" }

    # Send out our message
    client = VPollerClient(endpoint=endpoint, timeout=1000, retries=3)
    result = client.run(msg)

    return result

def status(endpoint):
    """
    Get status information from the VPoller Proxy daemon

    Args:
        endpoint (string): The endpoint we send the status message to
    
    """
    # The message we send to get status information
    msg = { "method": "proxy.status" }

    # Send out our message
    client = VPollerClient(endpoint=endpoint, timeout=1000, retries=3)
    result = client.run(msg)

    return result
    
def main():

    usage="""
Usage: vpoller-proxy [-d] [-D] [-p <pidfile>] [-f <config-file>] [-o <logfile>] start
       vpoller-proxy [-D] -e <endpoint> stop
       vpoller-proxy [-D] -e <endpoint> status
       vpoller-proxy --help
       vpoller-proxy --version

Arguments:
  start                                     Start the VPoller Proxy
  stop                                      Stop the VPoller Proxy
  status                                    Get status information

Options:
  -h, --help                                Display this usage info
  -v, --version                             Display version and exit
  -d, --daemon                              Start as a daemon, otherwise
                                            run in the foreground
  -D, --debug                               Debug mode, be more verbose
  -p <pidfile>, --pidfile <pidfile>         Specify pidfile file to use
                                            [default: /var/run/vpoller/vpoller-proxy.pid]
  -f <config-file>, --config <config-file>  Specify config file to use
                                            [default: /etc/vpoller/vpoller.conf]
  -e <endpoint>, --endpoint <endpoint>      Specify the endpoint we connect to
  -o <logfile>, --output <logfile>          Specify the logfile to use
                                            [default: /var/log/vpoller/vpoller-proxy.log]

"""

    args = docopt(usage, version="0.1.0")

    level = logging.DEBUG if args['--debug'] else logging.INFO

    logging.basicConfig(
        filename=args['--output'],
        format='%(asctime)s - %(levelname)s - vpoller-proxy[%(process)s]: %(message)s',
        level=level
    )

    result = None
        
    if args["start"]:
        start(args["--pidfile"], args["--config"], args["--daemon"])
    elif args["stop"]:
        result = stop(args["--endpoint"])
    elif args["status"]:
        result = status(args["--endpoint"])

    if result:
        result = json.loads(result)
        print json.dumps(result, indent=4)

if __name__ == '__main__':
    main()
