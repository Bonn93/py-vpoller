#!/usr/bin/env python
#
# Copyright (c) 2014 Marin Atanasov Nikolov <dnaeon@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer
#    in this position and unchanged.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""
The zabbix-vsphere-import tool is used for importing VMware vSphere objects
into a Zabbix server as regular Zabbix hosts

"""

import yaml
import zabbix_api
from docopt import docopt
from vpoller.client import VPollerClient

import logging

class ZabbixException(Exception):
    """
    Generic exception

    """
    pass

class ZabbixConnector(object):
    """
    Zabbix connector class

    Defines methods for connecting to a Zabbix server and
    importing of vSphere objects as regular Zabbix hosts

    """
    def __init__(self, options):
        self.options = options

    def connect(self):
        """
        Establishes a connection to the Zabbix server

        """
        logging.info('Connecting to Zabbix server at %s', self.options['zabbix']['hostname'])
        
        self.conn = zabbix_api.ZabbixAPI(server=self.options['zabbix']['hostname'])

        try:
            self.conn.login(
                user=self.options['zabbix']['username'],
                password=self.options['zabbix']['password']
            )
        except zabbix_api.ZabbixAPIException as e:
            logging.error('Cannot login to Zabbix server: %s', e)
            raise ZabbixException, 'Cannot login to Zabbix server: %s' % e

    def get_hosts(self):
        """
        Get all hosts registered in Zabbix

        """
        result = self._call_zabbix_method(
            method='host.get',
            params={'output': 'extend'}
        )

        return result

    def get_proxy_hosts(self):
        """
        Gets all Zabbix Proxy hosts

        """
        result = self._call_zabbix_method(
            method='proxy.get',
            params={'output': 'extend'}
        )

        return result

    def get_host_by_name(self, name):
        """
        Get a Zabbix host id by name

        Args:
            name (str): Name of the host in Zabbix

        Returns:
            The id of the host in Zabbix

        """
        data   = self.get_hosts()
        hosts  = data['result']

        for host in hosts:
            if host['name'] == name:
                break
        else:
            return None

        return host['hostid']

    def get_proxy_host_by_name(self, name):
        """
        Get a Zabbix Proxy host id by name

        Args:
            name (str): Name of the Proxy host in Zabbix

        Returns:
            The id of the Proxy host in Zabbix

        """
        data   = self.get_proxy_hosts()
        hosts  = data['result']

        for host in hosts:
            if host['host'] == name:
                break
        else:
            return None

        return host['proxyid']

    def get_templates(self):
        """
        Gets all Zabbix templates

        """
        result = self._call_zabbix_method(
            method='template.get',
            params={'output': 'extend'}
        )

        return result

    def get_template_by_name(self, name):
        """
        Get a template id by name

        Args:
            name (str): Name of the template in Zabbix
        
        Returns:
            The id of the template
    
        """
        data      = self.get_templates()
        templates = data['result']
        
        for template in templates:
            if template['name'] == name:
                break
        else:
            return None

        return template['templateid']

    def get_host_groups(self):
        """
        Gets all Zabbix host groups
        
        """
        result = self._call_zabbix_method(
            method='hostgroup.get',
            params={'output': 'extend'}
        )

        return result

    def get_host_group_by_name(self, name):
        """
        Get a Zabbix hostgroup id by name

        Args:
            name (str): Name of the host group in Zabbix
            
        Returns:
            The id of the host group in Zabbix

        """
        data   = self.get_host_groups()
        groups = data['result']

        for group in groups:
            if group['name'] == name:
                break
        else:
            return None

        return group['groupid']

    def create_host_group(self, name):
        """
        Create a Zabbix host group

        Args:
            name (str): Name of the host group to create

        Returns:
            The id of the newly create host group

        """
        logging.info("Creating Zabbix host group '%s'", name)

        result = self._call_zabbix_method(
            method='hostgroup.create',
            params={'name': name}
        )

        return result['result']['groupids']

    def create_host(self, params):
        """
        Create a Zabbix host

        Args:
            host (str): Hostname of the Zabbix host to create

        """
        result = self._call_zabbix_method(
            method='host.create',
            params=params
        )

        return result

    def import_vsphere_hosts(self):
        """
        Import vSphere hosts into Zabbix as regular Zabbix hosts

        """
        logging.info('[vSphere HostSystem] Importing objects to Zabbix')

        zabbix_data  = self.get_hosts()
        vsphere_data = self._get_vsphere_objects(method='host.discover')

        zabbix_hosts  = [host['host'] for host in zabbix_data['result']]
        vsphere_hosts = [host['name'] for host in vsphere_data['result']]
        missing_hosts = set(vsphere_hosts) - set(zabbix_hosts)

        if not missing_hosts:
            logging.info('[vSphere HostSystem] Objects are in sync with Zabbix')
            return

        logging.info('[vSphere HostSystem] Number of objects to be imported: %d', len(missing_hosts))

        # Get hosts options (templates, groups, macros) from the config file
        host_options = self._get_zabbix_host_options('vsphere_object_host')
        
        # Add a default interface for the host
        host_options['interfaces'] = [
            {
                'type': 1,
                'main': 1,
                'useip': 1,
                'ip': '127.0.0.1',
                'dns': '',
                'port': '10050'
            }
        ]

        # Create the hosts in Zabbix
        for host in missing_hosts:
            logging.info("[vSphere HostSystem] Creating Zabbix host '%s'", host) 
            params = {}
            params['host'] = host
            params.update(host_options)

            try:
                result = self.create_host(params)
            except zabbix_api.ZabbixAPIException as e:
                logging.warning('[vSphere HostSystem] Cannot create host in Zabbix: %s', e)

        logging.info('[vSphere HostSystem] Import of objects completed')

    def import_vsphere_vms(self):
        """
        Import vSphere VMs into Zabbix as regular Zabbix hosts

        """
        logging.info('[vSphere VirtualMachine] Importing objects to Zabbix')

        zabbix_data  = self.get_hosts()
        vsphere_data = self._get_vsphere_objects(method='vm.discover')

        zabbix_vms  = [host['host'] for host in zabbix_data['result']]
        vsphere_vms = [host['name'] for host in vsphere_data['result']]
        missing_vms = set(vsphere_vms) - set(zabbix_vms)

        if not missing_vms:
            logging.info('[vSphere VirtualMachine] Objects are in sync with Zabbix')
            return

        logging.info('[vSphere VirtualMachine] Number of objects to be imported: %d', len(missing_vms))

        # Get hosts options (templates, groups, macros) from the config file
        host_options = self._get_zabbix_host_options('vsphere_object_vm')
        
        # Add a default interface for the host
        host_options['interfaces'] = [
            {
                'type': 1,
                'main': 1,
                'useip': 1,
                'ip': '127.0.0.1',
                'dns': '',
                'port': '10050'
            }
        ]

        # Create the hosts in Zabbix
        for vm in missing_vms:
            logging.info("[vSphere VirtualMachine] Creating Zabbix host '%s'", vm)
            params = {}
            params['host'] = vm
            params.update(host_options)

            try:
                result = self.create_host(params)
            except zabbix_api.ZabbixAPIException as e:
                logging.warning('[vSphere VirtualMachine] Cannot create host in Zabbix: %s', e)
            
        logging.info('[vSphere VirtualMachine] Import of objects completed')

    def import_vsphere_datastores(self):
        """
        Import vSphere datastores into Zabbix as regular Zabbix hosts

        """
        logging.info('[vSphere Datastore] Importing objects to Zabbix')

        zabbix_data  = self.get_hosts()
        vsphere_data = self._get_vsphere_objects(
            method='datastore.discover',
            properties=['info.url']
        )

        zabbix_datastores  = [host['name'] for host in zabbix_data['result']]
        vsphere_datastores = [host['info.url'] for host in vsphere_data['result']]
        missing_datastores = set(vsphere_datastores) - set(zabbix_datastores)

        if not missing_datastores:
            logging.info('[vSphere Datastore] Objects are in sync with Zabbix')
            return

        logging.info('[vSphere Datastore] Number of objects to be imported: %d', len(missing_datastores))

        # Get hosts options (templates, groups, macros) from the config file
        host_options = self._get_zabbix_host_options('vsphere_object_datastore')
        
        # Add a default interface for the host
        host_options['interfaces'] = [
            {
                'type': 1,
                'main': 1,
                'useip': 1,
                'ip': '127.0.0.1',
                'dns': '',
                'port': '10050'
            }
        ]

        # Create the hosts in Zabbix
        for datastore in missing_datastores:
            logging.info("[vSphere Datastore] Creating host '%s'", datastore)

            # Get datastore name first and use it as the host name
            result = self._get_vsphere_objects(
                method='datastore.get',
                name=datastore,
                properties=['name']
            )
            datastore_name = result['result'][0]['name']

            params = {}
            params['name'] = datastore
            params['host'] = datastore_name
            
            params.update(host_options)

            try:
                result = self.create_host(params)
            except zabbix_api.ZabbixAPIException as e:
                logging.warning('[vSphere Datastore] Cannot create host in Zabbix: %s', e)
            
        logging.info('[vSphere Datastore] Import of objects completed')

    def _get_zabbix_host_options(self, name):
        """
        Helper method to simplify the retrieving of host 
        options from the config file.

        Options which are retrieved and returned include
        the host templates, groups and user defined macros

        Args:
            name (str): Name of the entry from config file to lookup

        Returns:
            A dict containing the host options from the config file

        """
        if not self.options['zabbix'].has_key(name):
            logging.warning("There is no '%s' entry in the config file", name)
            raise ZabbixException, "There is no '%s' entry in the config file" % name

        # Get the Zabbix Proxy if set
        proxy_id = None
        if self.options['zabbix'][name].has_key('proxy'):
            proxy_name = self.options['zabbix'][name]['proxy']
            proxy_id = self.get_proxy_host_by_name(proxy_name)
            if not proxy_id:
                logging.warning("Unable to find Zabbix proxy '%s'", proxy_name)
                raise ZabbixException, "Unable to find Zabbix proxy '%s'" % proxy_name

        # Get ids of the Zabbix templates 
        if not self.options['zabbix'][name].has_key('templates'):
            logging.warning("No templates are defined for '%s' config entry", name)
            raise ZabbixException, "No templates are defined for '%s' config entry" % name

        templates = []
        for template in self.options['zabbix'][name]['templates']:
            template_id = self.get_template_by_name(template)
            if not template_id:
                logging.warning("Template '%s' was not found on the Zabbix server", template)
                continue
            templates.append({ 'templateid': template_id })
            
        if not templates:
            logging.warning("No valid templates found for '%s' config entry", name)
            raise ZabbixException, "No valid templates found for '%s' config entry" % name

        # Get ids of the Zabbix hostgroups
        if not self.options['zabbix'][name].has_key('groups'):
            logging.warning("No groups are defined for '%s' config entry", name)
            raise ZabbixException, "No groups are defined for '%s' config entry" % name

        groups = []
        for group in self.options['zabbix'][name]['groups']:
            group_id = self.get_host_group_by_name(group)
            if not group_id:
                logging.warning("Unable to find Zabbix group '%s'", group)
                result = self.create_host_group(name=group)
                group_id = result[0]
            groups.append({ 'groupid': group_id })
            
        if not groups:
            logging.warning("No valid groups found for '%s' config entry", name)
            raise ZabbixException, "No valid groups found for '%s' config entry" % name

        # Get macros if any
        macros = []
        if self.options['zabbix'][name].has_key('macros'):
            for name, value in self.options['zabbix'][name]['macros'].items():
                # Convert macro names to Zabbix format -> {$MACRO}
                m = {}
                m['macro'] = '{$' + name + '}'
                m['value'] = value
                macros.append(m)

        r = {
            'proxy_hostid': proxy_id,
            'templates': templates,
            'groups': groups,
            'macros': macros
        }

        return r

    def _call_zabbix_method(self, method, params):
        """
        Helper method for calling Zabbix API methods

        Args:
            method  (str): Zabbix API method
            params (dict): Additional method params

        Returns:
            Result from calling the Zabbix API method

        """
        req = self.conn.json_obj(method=method, params=params)
        result = self.conn.do_request(req)

        return result

    def _get_vsphere_objects(self, method, name=None, properties=None):
        """
        Helper method for getting vSphere objects using vPoller

        Args:
            method      (str): vPoller method name
            properties (list): List of properties to be retrieved
        
        """
        client = VPollerClient(
            endpoint=self.options['vpoller']['endpoint'],
            retries=self.options['vpoller']['retries'],
            timeout=self.options['vpoller']['timeout']
        )

        msg = {
            'method':     method,
            'hostname':   self.options['vsphere']['hostname'],
            'name':       name,
            'properties': properties,
        }

        result = client.run(msg)

        if result['success']:
            logging.warning('Failed to get vSphere objects: %s', result)
            raise ZabbixException, 'Failed to get vSphere objects: %s' % result

        return result

def main():
    usage="""
Usage: zabbix-vsphere-import -f <config>
       zabbix-vsphere-import -v
       zabbix-vsphere-import -h

Options:
  -h, --help                        Display this usage info
  -v, --version                     Display version and exit
  -f <config>, --file <config>      Configuration file to use

"""
    
    args = docopt(usage, version='0.1.0')

    # Silence the 'zabbix_api' module logger as it
    # can be quite noisy ...
    _logger = logging.getLogger('zabbix_api')
    _logger.setLevel(logging.ERROR)
    
    # Set our logging here
    logging.basicConfig(
        format='[%(asctime)s] - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    
    try:
        with open(args['--file'], 'r') as f:
            options = yaml.load(f)
    except Exception as e:
        logging.warning('Cannot load configuration file %s: %s', args['--file'], e)
        raise ZabbixException, 'Cannot load configuration file %s: %s' % (args['--file'], e)

    zabbix = ZabbixConnector(options=options)
    zabbix.connect()
    
    # Import vSphere objects into Zabbix
    zabbix.import_vsphere_hosts()
    zabbix.import_vsphere_vms()
    zabbix.import_vsphere_datastores()

if __name__ == '__main__':
    main()
